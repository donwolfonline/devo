// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?   @db.Text
  location      String?
  company       String?
  website       String?
  github        String?
  linkedin      String?
  twitter       String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Theme preference
  theme         String    @default("cyberpunk")
  
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  portfolioStats PortfolioStats?
}

model PortfolioStats {
  id            String   @id @default(cuid())
  userId        String   @unique
  portfolioViews Int     @default(0)
  profileVisits Int      @default(0)
  lastUpdated   DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  imageUrl    String?
  demoUrl     String?
  githubUrl   String?
  technologies String[]
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
